"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaDataSet = void 0;
var MetaSection_1 = require("./MetaSection");
var MetaDataSet = /** @class */ (function () {
    function MetaDataSet(chart, ds) {
        /** Scales wil be initialized in beforeDraw hook */
        this.getXY = undefined;
        /** Is the dataset's data an array of {x,y}? */
        this.isXY = false;
        var cfg = ds.regressions;
        this.chart = chart;
        this.dataset = ds;
        this.normalizedData = this._normalizeData(ds.data);
        this.sections = this._createMetaSections(cfg);
        this._calculate();
    }
    /**
     * Normalize data to DataPoint[]
     * Only supports number[] and {x:number,y:number}
     */
    MetaDataSet.prototype._normalizeData = function (data) {
        var _this = this;
        return data.map(function (value, index) {
            var p;
            if (typeof value == 'number' || value == null || value === undefined) {
                p = [index, value];
            }
            else {
                _this.isXY = true;
                p = [value.x, value.y];
            }
            return p;
        });
    };
    /** @private */
    MetaDataSet.prototype._createMetaSections = function (cfg) {
        var _this = this;
        var source = cfg.sections || [
            { startIndex: 0, endIndex: this.dataset.data.length - 1 }
        ];
        return source.map(function (s) { return new MetaSection_1.MetaSection(s, _this); });
    };
    /** @private */
    MetaDataSet.prototype._calculate = function () {
        this.sections.forEach(function (section) { return section.calculate(); }); // Calculate Section Results
    };
    MetaDataSet.prototype.adjustScales = function () {
        if (this.topY !== undefined)
            return;
        var xScale;
        var yScale;
        var scales = this.chart.scales;
        Object.keys(scales).forEach(function (k) { return (k[0] == 'x' && (xScale = scales[k])) || (yScale = scales[k]); });
        this.topY = yScale.top;
        this.bottomY = yScale.bottom;
        this.getXY = function (x, y) { return ({
            x: xScale.getPixelForValue(x, undefined, undefined, true),
            y: yScale.getPixelForValue(y)
        }); };
    };
    MetaDataSet.prototype.drawRegressions = function () {
        var ctx = this.chart.chart.ctx;
        ctx.save();
        try {
            this.sections.forEach(function (section) { return section.drawRegressions(ctx); });
        }
        finally {
            ctx.restore();
        }
    };
    MetaDataSet.prototype.drawRightBorders = function () {
        var ctx = this.chart.chart.ctx;
        ctx.save();
        try {
            for (var i = 0; i < this.sections.length - 1; i++)
                this.sections[i].drawRightBorder(ctx);
        }
        finally {
            ctx.restore();
        }
    };
    return MetaDataSet;
}());
exports.MetaDataSet = MetaDataSet;
//# sourceMappingURL=MetaData.js.map