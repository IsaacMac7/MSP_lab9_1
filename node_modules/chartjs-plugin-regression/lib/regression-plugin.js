"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartRegressions = void 0;
var MetaData_1 = require("./MetaData");
// Cache for all plugins' metadata
var _metadataMap = {};
var _chartId = 0;
var Plugin = /** @class */ (function () {
    function Plugin() {
        this.id = 'regressions';
    }
    Plugin.prototype.beforeInit = function (chart) {
        chart.$$id = ++_chartId;
    };
    /**
     * Called after update (when the chart is created and when chart.update() is called)
     * @param chart
     */
    Plugin.prototype.beforeUpdate = function (chart, options) {
        var o, p, r;
        var onComplete = (o = chart.config.options) &&
            (p = o.plugins) &&
            (r = p.regressions) &&
            r.onCompleteCalculation;
        forEach(chart, function (ds, meta, datasetIndex) {
            meta = new MetaData_1.MetaDataSet(chart, ds);
            var id = chart.$$id * 1000 + datasetIndex;
            _metadataMap[id] = meta;
        });
        if (onComplete)
            onComplete(chart);
    };
    /**
     * It's called once before all the drawing
     * @param chart
     */
    Plugin.prototype.beforeRender = function (chart, options) {
        forEach(chart, function (ds, meta) { return meta.adjustScales(); });
    };
    /** Draws the vertical lines before the datasets are drawn */
    Plugin.prototype.beforeDatasetsDraw = function (chart, easing, options) {
        forEach(chart, function (ds, meta) { return meta.drawRightBorders(); });
    };
    /** Draws the regression lines */
    Plugin.prototype.afterDatasetsDraw = function (chart, easing, options) {
        forEach(chart, function (ds, meta) { return meta.drawRegressions(); });
    };
    Plugin.prototype.destroy = function (chart) {
        Object.keys(_metadataMap)
            .filter(function (k) { return (k / 1000) >> 0 == chart.$$id; })
            .forEach(function (k) { return delete _metadataMap[k]; });
    };
    /** Get dataset's meta data */
    Plugin.prototype.getDataset = function (chart, datasetIndex) {
        var id = chart.$$id * 1000 + datasetIndex;
        return _metadataMap[id];
    };
    /** Get dataset's meta sections */
    Plugin.prototype.getSections = function (chart, datasetIndex) {
        var ds = this.getDataset(chart, datasetIndex);
        return ds && ds.sections;
    };
    return Plugin;
}());
function forEach(chart, fn) {
    chart.data.datasets.forEach(function (ds, i) {
        if (ds.regressions && chart.isDatasetVisible(i)) {
            var meta = exports.ChartRegressions.getDataset(chart, i);
            fn(ds, meta, i);
        }
    });
}
exports.ChartRegressions = new Plugin();
window.ChartRegressions = exports.ChartRegressions;
//# sourceMappingURL=regression-plugin.js.map