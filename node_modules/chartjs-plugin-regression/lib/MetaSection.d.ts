import * as regression from 'regression';
import { Section, Type, LineOptions, BasicOptions, CalculationOptions, CopyOptionsEx } from './types';
import { MetaDataSet } from './MetaData';
export interface Result extends regression.Result {
    type: Type;
}
export declare class MetaSection implements Section, BasicOptions {
    private _meta;
    type: Type[];
    startIndex: number;
    endIndex: number;
    line: LineOptions;
    extendPredictions: boolean;
    result?: regression.Result;
    copy: CopyOptionsEx;
    calculation: CalculationOptions;
    label: string;
    constructor(sec: Section, _meta: MetaDataSet);
    /** Validates the type to avoid inconsistences */
    _validateType(): void;
    /** Calculates the regression(s) and sets the result objects */
    calculate(): void;
    private _calculateBestR2;
    private _calculateCopySection;
    drawRightBorder(ctx: CanvasRenderingContext2D): void;
    drawRegressions(ctx: CanvasRenderingContext2D): void;
    drawRange(ctx: CanvasRenderingContext2D, startIndex: number, endIndex: number, forceDash: boolean): void;
    private _setLineAttrs;
}
